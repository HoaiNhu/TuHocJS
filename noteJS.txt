//Web=====================================================
+ thứ tự ưu tiên trong phép toán : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence








//Cách debug

- mở run and debug

- chọn trình duyệt

- nhấp vào dòng code cần dừng

- run

- nếu mún biết biểu thức true or false, bôi đen r add to watch


//Note BE

//middleware để xử lí trung gian

- route để hướng 

- req: để nhận

- res: để trả ra

- passport js để đăng nhập vs gg fb

























//Nội dung=================================================

//Bài 1----------------------------------------------------
- alert: hiện thị thông báo dạng popup trên trình duyệt

- console.log: hiện nội dung trên console

//Bài 2----------------------------------------------------

- các cách nhúng code JS vào html
    1. internal nhúng trực tiếp vào thẻ script
    2. external: nhúng gián tiếp từ file js trong thuộc tính src của thẻ script

//Bài 3----------------------------------------------------

- hàm prompt: để hiển thị hộp thoại nhập liệu trên trình duyệt và chờ ng dùng nhập 1 giá trị 
    -> về cơ bản: 
        - dữ liệu vừa nhập sẽ biến mất và ko dc lưu vào bộ nhớ
        - 

- biến : là 1 ô nhớ trong bộ nhớ dc đặt tên và sử dụng để lưu giá trị

- 3 từ khóa khai báo biến
    1. var: trc ES6
    2. let: từ ES6
    3. const: khai báo hằng số: biến ko đổi giá trị sau khi gán

- khai báo biến: chỉ đặt trên

- khởi tạo biến: đặt tên và gán giá trị

- xuất giá trị: in giá trị dc lưu trong biến

//Bài 4----------------------------------------------------

- Quy tắc đặt tên biến

- Các kiểu dữ liệu nguyên thủy

    1. String: Kiểu chuỗi - Kiểu dữ liệu để lưu trữ chuỗi ký tự.
    Ví dụ: let myString = "Xin chào";

    2. Number: Kiểu số - Kiểu dữ liệu để lưu trữ số, có thể là số nguyên hoặc số thực.
    Ví dụ: let soNguyen = 10; và let soThuc = 3.14;

    3. Boolean: Kiểu luận lý - Chỉ có thể nhận giá trị true hoặc false.
    Ví dụ: let isTrue = true; và let isFalse = false;

    4. Undefined: Biến chưa được gán giá trị sẽ có kiểu dữ liệu là undefined.
    Ví dụ: let undefinedVariable;

    5. Null: Biến được gán giá trị là null. Thường dùng để reset biến, gán giá trị mặc định.
    Ví dụ: let nullValue = null;

- dùng typeof để kiểm tra kdl

//Bài 5----------------------------------------------------

- xuất dữ liệu vs Biến  
    1. dùng dấu + 
    2. dùng dấu ,
    3. console.log(`Căn bậc 2 của ${soA} là ${soB}`);
    4. console.log(`Căn bậc 2 của %s là %s`, soA, soB);

//Bài 8----------------------------------------------------

- mặc định kiểu nhập từ bàn phím là string
    -> đối vs phép cộng -> JS sẽ hiểu là cộng chuỗi
    -> đối vs các phép tính khác -> JS cố gắng chuyển đổi thành kiểu số trc khi tính toán
    -> nếu ko chuyển dc thì kq là NaN, Not a Number

- muốn tính toán thì phải ép kiểu trc khi tính toán
    let numberC = parseInt(prompt("Nhập số C mau"));
    let numberC = parseFloat(prompt("Nhập số C mau"));
    let numberC = Number(prompt("Nhập số C mau"));

- nếu ép số nguyên mà nhập số thực thì giá trị nhập sẽ bị ép về số nguyên

//Bài 9----------------------------------------------------

- trong phép tính đơn lẻ thì ++,-- trc sau là như nhau

- trong các phép toán phức tạp thì tuân theo quy tắc
    -> a++, a-- => postfix
    -> ++a, --a => prefix

- ưu tiên tính toán postfix, prefix
    1. prefix
    2. các phép toán còn lại
    3. gán giá trị cho biến bên trái dấu = 
    4. postfix

//Bài 10----------------------------------------------------

- &&: and -> trả về true nếu all đều đúng

- ||: or -> trả vê true nếu ít nhất 1 biểu thức đúng

- !: not -> đảo ngc giá trị

- toFixed(<số chữ số sau dấu phẩy>)

//Bài 12----------------------------------------------------

- các phép so sánh
    1. != , > , <, >=, <=
    2. == : bằng nhau ko care kdl
    3. ===: bằng nhau so sánh giá trị và kdl
    4. !==: khác nhau khách lun kdl

Chức năng                       | Bằng nhau    ==                                 | Bằng nhau ===
Coercion ép kiểu        | Không quan tâm kiểu dữ liệu khi so sánh              | Không quan tâm kiểu dữ liệu khi so sánh
Type Conversion 
Chuyển đổi kiểu         | Không tuân thủ coercion JS                             | Không tuân thủ coercion JS 
                    (không quy định kiểu dữ liệu trước khi so sánh)              (không quy định kiểu dữ liệu trước khi so sánh)

Ghi chú:

Chức năng: tự động chuyển đổi kiểu dữ liệu khi so sánh.
Coercion ép kiểu: ép kiềm nén dữ liệu trước khi so sánh.
Type Conversion Chuyển đổi kiểu: chuyển đổi rõ ràng các loại của chúng.

- chỉ có phép + gặp chuỗi thì mới bị ép kiểu ngầm sang chuỗi, các phép khách sẽ bị ép thành số

//Bài 13----------------------------------------------------

- 1. Math.sqrt(): căn bậc 2

-  2. Math.pow(base, exponent): lũy thừa

-  3. Math. abs(): lấy trị tuyệt đối

-  4. Math.ceil(): làm tròn lên, Math.floor(): làm tròn xuống

-  5. Math.round(), từ 0.5 lm tròn thành 1

-  6. .toFixed(): làm tròn x số sau dấu .
    -> kiểu trả về của toFixed là string
    -> ép kiểu sang number

- 7. Math.min(): tìm giá trị nhỏ nhất, Mạh.max(): tìm giá trị lớn nhất

//Bài 14----------------------------------------------------

- hàm number(value): chuyển value sang số
    -> nếu ko chuyển dc trả về NaN

- isNaN(value): kiểm tra value ko phải định dạng số (NaN), hoặc ko thể chuyển đổi sang số
    -> dùng hàm Number để chuyển đổi
     --> true khi giá trị sau chuyển đổi ko phải số
    --> false: giá trị sau chuyển đổi là số

- NaN: biểu thị rằng  giá trị không phải là  số hợp lệ .
- isNaN:  + kiểm tra xem giá trị có phải là NaN hoặc không thể chuyển đổi thành một số hợp lệ hay không. 
              + nếu giá trị không thể chuyển đổi thành số (NaN),  sẽ trả về true, ngược lại trả về false. 

- true, false <=> 0 và 1: nên vẫn trả về false nếu dùng hàm isNaN

- null: dùng hàm number chuyển -> 0 khi dùng isNaN = false

- chuỗi: "", " ": isNaN = false

- Hàm Number.isNaN(value): chỉ trả về true nếu value or biểu thức truyền vào là NaN

//Bài 15----------------------------------------------------

- Math.random(): trả về số thực trong [0 -> 1)

// random trong (0 -> 1)
let letRandom = Math.random();
console.log("Số ngấu nhiên từ 0 đến sát 1 là %s", letRandom);

// 2. random số > 1
let letRandom1 = Math.random() * 10;
console.log("Số ngấu nhiên từ 0 đến sát 10 là %s", letRandom1);

//random số nguyên
let letRandom2 = Math.floor(Math.random() * 10);
let letRandom3 = parseInt(Math.random() * 10);
console.log("Số ngấu nhiên từ 0 đến sát 10 là %s", letRandom2);
console.log("Số ngấu nhiên từ 0 đến sát 10 là %s", letRandom3);

//Bài 16----------------------------------------------------

- if...else

//Bài 21----------------------------------------------------

- toán tử 3 ngôi:
    -> cấu trúc:
        
            biến = biểu thức điều kiện 1 ? biểu thức 2 : biểu thức 3
            biến = biểu thức điều kiện 1 ? biểu thức 2 : (biểu thức 1' ? biểu thức 2 : biểu thức 3)

        - nếu biểu thức 1 đúng thì thực hiện biểu thức 2, ngược lại thực hiện biểu thức 3
        - bản chất là rút gọn câu lệnh if...else

//Bài 22----------------------------------------------------

-  trong JS, có 1 số giá trị dc coi là falsy(giá trị sai). những giá trị này khi dc chuyển đổi sang boolean mang giá trị false

- ngc lại vs falsy là truthy

- các gia trị falsy:

    1. false
    2. 0
    3. -0
    4. 0n:số bigInt không
    5. "": chuoix rỗng
    6. null
    7. undefined: chưa gán giá trị
    8. NaN

//Bài 23----------------------------------------------------

switch(<biểu thức>){
    case <giá trị 1>:
        //code thực thi nếu biểu thức có giá trị 1
        break;
    case <giá trị 2>:
        //code thực thi nếu biểu thức có giá trị 1
        break;
    ...
    default:
        //code thực thi nếu ko có trường hợp nào ở trên

}

- biến thể, nhiều case cùng 1 đoạn code
switch(<biểu thức>){
    case <giá trị 1>:
    case <giá trị 3>:
    case <giá trị 4>:
    case <giá trị 15:
        //code thực thi nếu biểu thức có giá trị 1
        break;
    case <giá trị 2>:
        //code thực thi nếu biểu thức có giá trị 1
        break;
    ...
    default:
        //code thực thi nếu ko có trường hợp nào ở trên

}

- \n: để xuống dòng

//Bài 24----------------------------------------------------

while(condition){
    //code 
    //khi condition false, vòng lặp sẽ dừng
}

//Bài 25----------------------------------------------------

do {
    //code thực thi ít nhất 1 lần
}while(condition);

//Bài 26----------------------------------------------------
while(true):tạo vòng lặp vô tận -> thêm break

//Bài 27----------------------------------------------------
for(khởi tạo; điều kiện; bước lặp){
    khối lệnh
}

//Bài 28----------------------------------------------------

- break: thường dùng để thoát khỏi 1 vòng lặp,

- continue: dùng để bỏ qua 1 giá trị trong vòng lặp

//Bài 29----------------------------------------------------

- kiểm tra số nguyên 
    1. a % 1 === 0
    2. Number.isInterger === true nếu nguyên false nếu ko nguyên
        -> nếu số quá lớn (>16 chữ số) mà .1 thì vẫn coi như số nguyên ví dụ: 4500000000000000.1
        -> nếu phần thập phân quá nhỏ(>15 số 0) thì vẫn coi như nguyên, ví dụ: 5.0000000000000001

//Bài 33----------------------------------------------------

- khi muốn thực thi 1 đoạn code nhiều lần, ta dùng hàm để tránh bị trùng lặp code

- hàm là 1 khối lệnh thực thi 1 công việc hoàn chỉnh (module), còn dc gọi là chương trình con

- công dụng: 
    -> chia nhỏ công việc dự án
    -> tái sử dụng code

- giá trị trả về của hàm ko dùng return là undefined

- nếu ko truyền giá trị mặc định cho paramater, khi gọi hàm nhập thiếu đối số sẽ trả về NaN

//Bài 34----------------------------------------------------

- các cách khai báo Hàm
    1. function declaration(khai báo tường minh)

        function tenHam(paramater){
            //body
            //return sth
        }

    2. function expression

        let tenBien = function(thamSo){
            //body
            //return sth
        }

    3. Arrow function
        
        let tenBien = (thamSo) => {
            //body
            //return sth (bỏ return nếu hàm quá ngắn)
        }

    4. gọi hàm trong hàm khác

//Bài 38----------------------------------------------------

- scope(phạm vi): xác định nơi mà 1 biến có thể dc truy cập và sử dụng

- global scope: phạm vi toàn cục, truy xuất mọi nơi

- function scope: phạm vi hàm, chỉ truy xuất và sử dụng trong hàm

- block scope: phạm vi khối, như trong if... 

//Bài 39----------------------------------------------------

- hoisting(nâng cao): là hành vi của JS nhằm di chuyển tất cả các kHAI BÁO lên đầu phạm vi hiện tại 
    (lên đầu tập lệnh hiện tai, lên đầu hàm hiện tại, lên đầu block hiện tại)

- var: dc nâng cao (hosted) lên đầu tập lệnh hiện tại, hoặc hàm hiện tại, có thể sử dụng trc khi nó dc khai báo trong mã lệnh
    -> có phạm vi function scope, biến sẽ dc đẩy lên đầu hàm, nếu khai báo trong khối if thì nó sẽ đẩy lên đầu hàm lun
    -> có thể khai báo lại 1 biến sử dụng var mà ko gây ra lỗi

- let, const: cx dc nâng cao, lên đầu phạm vi block scope tuy nhiên biến sẽ nằm trong vùng temporal dead zone - ko thể sử dụng biến trc khi nó dc khai báo
    -> khối mã nhận bt biến nhưng ko thể sử dụng dc cho đến khi nó dc khai báo\
    -> phạm vi block scope, đẩy lên đầu block
    -> ko thể khai báo lại 1 biến sử dụng let trong cùng phạm vi

- hoisting in function:
    -> function declaration thì sẽ bị hoisting, có thể họi hàm trc khi định nghĩa hàm
    -> function expression và Arrow function thì ko thể gọi hàm trc khi định nghĩa

//Bài 40----------------------------------------------------

- đệ quy là cách dùng hàm để tự gọi lại chính nó

- để giải đệ quy cần 2 điều kiện:
    1. điểm dừng của bài toán
    2. quy luật của bài toán

//Bài 41, 42, 43, 44, 45, 46, 47, 48----------------------------------------------------

- string: `` or "" or ''

- index: start from 0

- length: kiểm tra chuỗi có bao nhiu kí tự

- name.slice(beginIndex, endIndex);
    -> beginIndex: Vị trí bắt đầu cắt.
    -> endIndex: Vị trí kết thúc cắt (đến endIndex - 1). bắt buộc start < end
    -> Nếu không nhập endIndex, chuỗi sẽ được cắt đến cuối. hiểu ngầm định endIndex = string.length

- name.substring(startIndex, endIndex)
    -> startIndex: Vị trí bắt đầu cắt.
    -> endIndex: Vị trí kết thúc cắt endIndex - 1.
    -> Nếu không nhập endIndex, chuỗi sẽ được cắt đến cuối.

- khác nhau giữ slice và substring:
    1. Xử lí vs start > end
        - substring(start, end): nếu start > end, chúng sẽ tự động đảo ngc lại, tự hiểu số nhỏ là start
        - slice(start, end): nếu start > end, chuỗi xem như rỗng
    
    2. xử lí với tham số âm
        - substring(start, end): chuyển số âm thành 0, nếu end < start khi chuyển số âm thì nó sẽ tự động đảo ngược chúng
        - slice(start, end): cho phép sử dung số âm để đếm từ cuối chuỗi, số âm sẽ dc hiểu là đếm từ cuối chuỗi về phía trc

    * đến từ cuối chuỗi là đến từ -1

- trim(): xóa toàn bộ khoảng trắng ở cả 2 đầu chuỗi

- trimStart(): xóa toàn bộ khoảng trắng ở đầu chuỗi

- trim(End): xóa toàn bộ khoảng trắng ở cuối chuỗi

- concat(): let newStr = s1.concat(s2, s3, ... sN): nối s2, s3,... vào chuỗi s1

- toUpperCase(): chuyển toàn bộ chuỗi sang in hoa

- toLowerCase(): chuyển toàn bộ chuỗi sang in Thường

- charAt(index): trả về chuỗi nằm ở vị trí index dc truyền vào

- replace(oldValue, newValue): let newStr = replace(oldValue, newValue): thay thế giá trị (oldValue) đầu tiên dc tìm thấy trong chuỗi bằng giá trị mới (newValue)
    -> để thay thế all oldValue = newValue dùng biểu thức chính quy 
    /: ký tự gạch chéo (forward slash) bắt đầu biểu diễn chính quy
    /: ký tự gạch chéo kết thúc phần chuỗi tìm kiếm
    g: cờ global, khi sử dụng cờ này JS sẽ tìm toàn bộ chuỗi
    -> ví dụ: console.log(s1.replace(/học/g, "ngủ"));

- repeat(count): lặp chuỗi count lần

- []: có cx dc, ko cx dc

- indexOf(searchValue, [fromIndex]): tìm kiếm searchValue xuất hiện lần đầu trong chuỗi, nếu tồn tại trả về index, ko tồn tại trả về -1
    -> fromIndex: tìm từ vị trí fromIndex đến cuối chuỗi

- lastIndexOf(searchValue, [endIndex]): tìm kiếm searchValue xuất hiện lần cuối trong chuỗi, nếu tồn tại trả về index, ko tồn tại trả về -1
    -> endIndex: tìm từ 0 -> endIndex, bỏ trống tìm toàn chuỗi

- includes(searchValue, [fromIndex]): kiểm tra chuỗi con, 

- startsWith(searchValue , [startIndex])
    -> Kiểm tra chuỗi có bắt đầu bằng searchValue không? Đúng trả về true, sai trả về false
    -> startIndex (tùy chọn): Vị trí bắt đầu tìm kiếm trong chuỗi. Nếu không thì tìm từ đầu chuỗi

- endsWith(searchValue, [endIndex])
    -> Kiểm tra chuỗi có kết thúc bằng searchValue không? Đúng trả về true, sai trả về false
    -> endIndex (tùy chọn): Vị trí kết thúc tìm kiếm trong chuỗi nếu có trong: tìm kiếm từ hết chuỗi gốc
    ->  endIndex tìm từ 0 đến endIndex - 1

- split: tách chuỗi trả về mảng
    -> str.split(separator, [limit])
        -> str: chuỗi gốc cần chia
        -> separator: chuỗi để xác định vị trí thực hiện tách. nó có thể là 1 kí tự or 1 biểu thức chính quy, gặp separator là tách
        -> limit: giới hạn số lượng phần tử trong mảng kết quả
        -> nếu nhập "" thì sẽ tách từng kí tự trong mảng

//Bài 54----------------------------------------------------

- thời gian và ngày tháng là 1 phần quan trọng trong phát triển Web

- trong JS, có 1 đối tượng mạnh mẽ là Date giúp bạn xử lí và hiển thị thời gian và ngày tháng

- new Date(): tạo đối tượng, mặc định sẽ lấy thời gian hiện tại khi khởi tạo

- timestamp là 1 đại diện cho 1 điểm cụ thể trong thời gian, tính bằng milisecond từ mốc 0
    -> mốc 0: 00: 00: 00: ngày 1 tháng 1 năm 1970