//Web=====================================================
+ thứ tự ưu tiên trong phép toán : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence


//Nội dung=================================================

//Bài 1----------------------------------------------------
- alert: hiện thị thông báo dạng popup trên trình duyệt

- console.log: hiện nội dung trên console

//Bài 2----------------------------------------------------

- các cách nhúng code JS vào html
    1. internal nhúng trực tiếp vào thẻ script
    2. external: nhúng gián tiếp từ file js trong thuộc tính src của thẻ script

//Bài 3----------------------------------------------------

- hàm prompt: để hiển thị hộp thoại nhập liệu trên trình duyệt và chờ ng dùng nhập 1 giá trị 
    -> về cơ bản: 
        - dữ liệu vừa nhập sẽ biến mất và ko dc lưu vào bộ nhớ
        - 

- biến : là 1 ô nhớ trong bộ nhớ dc đặt tên và sử dụng để lưu giá trị

- 3 từ khóa khai báo biến
    1. var: trc ES6
    2. let: từ ES6
    3. const: khai báo hằng số: biến ko đổi giá trị sau khi gán

- khai báo biến: chỉ đặt trên

- khởi tạo biến: đặt tên và gán giá trị

- xuất giá trị: in giá trị dc lưu trong biến

//Bài 4----------------------------------------------------

- Quy tắc đặt tên biến

- Các kiểu dữ liệu nguyên thủy

    1. String: Kiểu chuỗi - Kiểu dữ liệu để lưu trữ chuỗi ký tự.
    Ví dụ: let myString = "Xin chào";

    2. Number: Kiểu số - Kiểu dữ liệu để lưu trữ số, có thể là số nguyên hoặc số thực.
    Ví dụ: let soNguyen = 10; và let soThuc = 3.14;

    3. Boolean: Kiểu luận lý - Chỉ có thể nhận giá trị true hoặc false.
    Ví dụ: let isTrue = true; và let isFalse = false;

    4. Undefined: Biến chưa được gán giá trị sẽ có kiểu dữ liệu là undefined.
    Ví dụ: let undefinedVariable;

    5. Null: Biến được gán giá trị là null. Thường dùng để reset biến, gán giá trị mặc định.
    Ví dụ: let nullValue = null;

- dùng typeof để kiểm tra kdl

//Bài 5----------------------------------------------------

- xuất dữ liệu vs Biến  
    1. dùng dấu + 
    2. dùng dấu ,
    3. console.log(`Căn bậc 2 của ${soA} là ${soB}`);
    4. console.log(`Căn bậc 2 của %s là %s`, soA, soB);

//Bài 8----------------------------------------------------

- mặc định kiểu nhập từ bàn phím là string
    -> đối vs phép cộng -> JS sẽ hiểu là cộng chuỗi
    -> đối vs các phép tính khác -> JS cố gắng chuyển đổi thành kiểu số trc khi tính toán
    -> nếu ko chuyển dc thì kq là NaN, Not a Number

- muốn tính toán thì phải ép kiểu trc khi tính toán
    let numberC = parseInt(prompt("Nhập số C mau"));
    let numberC = parseFloat(prompt("Nhập số C mau"));
    let numberC = Number(prompt("Nhập số C mau"));

- nếu ép số nguyên mà nhập số thực thì giá trị nhập sẽ bị ép về số nguyên

//Bài 9----------------------------------------------------

- trong phép tính đơn lẻ thì ++,-- trc sau là như nhau

- trong các phép toán phức tạp thì tuân theo quy tắc
    -> a++, a-- => postfix
    -> ++a, --a => prefix

- ưu tiên tính toán postfix, prefix
    1. prefix
    2. các phép toán còn lại
    3. gán giá trị cho biến bên trái dấu = 
    4. postfix

//Bài 10----------------------------------------------------

- &&: and -> trả về true nếu all đều đúng

- ||: or -> trả vê true nếu ít nhất 1 biểu thức đúng

- !: not -> đảo ngc giá trị

- toFixed(<số chữ số sau dấu phẩy>)

//Bài 12----------------------------------------------------

- các phép so sánh
    1. != , > , <, >=, <=
    2. == : bằng nhau ko care kdl
    3. ===: bằng nhau so sánh giá trị và kdl
    4. !==: khác nhau khách lun kdl

Chức năng                       | Bằng nhau    ==                                 | Bằng nhau ===
Coercion ép kiểu        | Không quan tâm kiểu dữ liệu khi so sánh              | Không quan tâm kiểu dữ liệu khi so sánh
Type Conversion 
Chuyển đổi kiểu         | Không tuân thủ coercion JS                             | Không tuân thủ coercion JS 
                    (không quy định kiểu dữ liệu trước khi so sánh)              (không quy định kiểu dữ liệu trước khi so sánh)

Ghi chú:

Chức năng: tự động chuyển đổi kiểu dữ liệu khi so sánh.
Coercion ép kiểu: ép kiềm nén dữ liệu trước khi so sánh.
Type Conversion Chuyển đổi kiểu: chuyển đổi rõ ràng các loại của chúng.

- chỉ có phép + gặp chuỗi thì mới bị ép kiểu ngầm sang chuỗi, các phép khách sẽ bị ép thành số

//Bài 13----------------------------------------------------

- 1. Math.sqrt(): căn bậc 2

-  2. Math.pow(base, exponent): lũy thừa

-  3. Math. abs(): lấy trị tuyệt đối

-  4. Math.ceil(): làm tròn lên, Math.floor(): làm tròn xuống

-  5. Math.round(), từ 0.5 lm tròn thành 1

-  6. .toFixed(): làm tròn x số sau dấu .
    -> kiểu trả về của toFixed là string
    -> ép kiểu sang number

- 7. Math.min(): tìm giá trị nhỏ nhất, Mạh.max(): tìm giá trị lớn nhất

//Bài 14----------------------------------------------------

- hàm number(value): chuyển value sang số
    -> nếu ko chuyển dc trả về NaN

- isNaN(value): kiểm tra value ko phải định dạng số (NaN), hoặc ko thể chuyển đổi sang số
    -> dùng hàm Number để chuyển đổi
     --> true khi giá trị sau chuyển đổi ko phải số
    --> false: giá trị sau chuyển đổi là số

- NaN: biểu thị rằng  giá trị không phải là  số hợp lệ .
- isNaN:  + kiểm tra xem giá trị có phải là NaN hoặc không thể chuyển đổi thành một số hợp lệ hay không. 
              + nếu giá trị không thể chuyển đổi thành số (NaN),  sẽ trả về true, ngược lại trả về false. 

- true, false <=> 0 và 1: nên vẫn trả về false nếu dùng hàm isNaN

- null: dùng hàm number chuyển -> 0 khi dùng isNaN = false

- chuỗi: "", " ": isNaN = false

- Hàm Number.isNaN(value): chỉ trả về true nếu value or biểu thức truyền vào là NaN